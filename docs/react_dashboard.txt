// DeFi Autopilot - React Dashboard
import React, { useState, useEffect, useCallback } from 'react';
import { ethers } from 'ethers';

// CSS-in-JS styles for the dashboard
const styles = {
  dashboard: {
    fontFamily: '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif',
    background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
    minHeight: '100vh',
    padding: '20px',
    color: 'white'
  },
  header: {
    textAlign: 'center',
    marginBottom: '40px',
    background: 'rgba(255, 255, 255, 0.1)',
    backdropFilter: 'blur(10px)',
    borderRadius: '20px',
    padding: '20px',
    border: '1px solid rgba(255, 255, 255, 0.2)'
  },
  title: {
    fontSize: '2.5rem',
    fontWeight: 'bold',
    marginBottom: '10px',
    textShadow: '2px 2px 4px rgba(0,0,0,0.3)'
  },
  subtitle: {
    fontSize: '1.2rem',
    opacity: 0.9,
    fontWeight: '300'
  },
  container: {
    maxWidth: '1200px',
    margin: '0 auto',
    display: 'grid',
    gridTemplateColumns: 'repeat(auto-fit, minmax(350px, 1fr))',
    gap: '20px'
  },
  card: {
    background: 'rgba(255, 255, 255, 0.15)',
    backdropFilter: 'blur(10px)',
    borderRadius: '20px',
    padding: '30px',
    border: '1px solid rgba(255, 255, 255, 0.2)',
    boxShadow: '0 8px 32px rgba(31, 38, 135, 0.37)'
  },
  cardTitle: {
    fontSize: '1.5rem',
    fontWeight: 'bold',
    marginBottom: '20px',
    color: '#fff'
  },
  balance: {
    fontSize: '2.5rem',
    fontWeight: 'bold',
    color: '#4ade80',
    marginBottom: '10px'
  },
  yield: {
    fontSize: '1.3rem',
    color: '#60a5fa',
    marginBottom: '5px'
  },
  protocol: {
    fontSize: '1.1rem',
    color: '#e5e7eb',
    opacity: 0.8
  },
  optimizationAlert: {
    gridColumn: '1 / -1',
    background: 'linear-gradient(135deg, #10b981 0%, #059669 100%)',
    border: '2px solid #34d399',
    animation: 'pulse 2s infinite',
    position: 'relative',
    overflow: 'hidden'
  },
  alertTitle: {
    fontSize: '1.8rem',
    fontWeight: 'bold',
    marginBottom: '15px',
    display: 'flex',
    alignItems: 'center'
  },
  alertDescription: {
    fontSize: '1.2rem',
    marginBottom: '20px',
    lineHeight: '1.6'
  },
  profitGrid: {
    display: 'grid',
    gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))',
    gap: '15px',
    marginBottom: '25px'
  },
  profitItem: {
    background: 'rgba(255, 255, 255, 0.2)',
    padding: '15px',
    borderRadius: '10px',
    textAlign: 'center'
  },
  profitLabel: {
    fontSize: '0.9rem',
    opacity: 0.8,
    marginBottom: '5px'
  },
  profitValue: {
    fontSize: '1.4rem',
    fontWeight: 'bold'
  },
  rebalanceButton: {
    background: 'linear-gradient(135deg, #f59e0b 0%, #d97706 100%)',
    color: 'white',
    border: 'none',
    padding: '15px 30px',
    fontSize: '1.2rem',
    fontWeight: 'bold',
    borderRadius: '10px',
    cursor: 'pointer',
    boxShadow: '0 4px 15px rgba(0, 0, 0, 0.2)',
    transition: 'all 0.3s ease',
    width: '100%'
  },
  yieldRow: {
    display: 'flex',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: '12px 0',
    borderBottom: '1px solid rgba(255, 255, 255, 0.1)'
  },
  protocolName: {
    fontSize: '1.1rem',
    fontWeight: '500'
  },
  yieldValue: {
    fontSize: '1.1rem',
    fontWeight: 'bold',
    color: '#4ade80'
  },
  loading: {
    display: 'flex',
    justifyContent: 'center',
    alignItems: 'center',
    height: '100vh',
    fontSize: '1.5rem',
    background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
    color: 'white'
  },
  loadingSpinner: {
    border: '4px solid rgba(255, 255, 255, 0.3)',
    borderTop: '4px solid #fff',
    borderRadius: '50%',
    width: '40px',
    height: '40px',
    animation: 'spin 1s linear infinite',
    marginRight: '15px'
  },
  connectButton: {
    background: 'linear-gradient(135deg, #8b5cf6 0%, #7c3aed 100%)',
    color: 'white',
    border: 'none',
    padding: '12px 24px',
    fontSize: '1.1rem',
    fontWeight: 'bold',
    borderRadius: '10px',
    cursor: 'pointer',
    transition: 'all 0.3s ease'
  },
  statusIndicator: {
    display: 'flex',
    alignItems: 'center',
    gap: '8px',
    marginTop: '10px'
  },
  statusDot: {
    width: '10px',
    height: '10px',
    borderRadius: '50%',
    backgroundColor: '#4ade80',
    animation: 'pulse 2s infinite'
  }
};

// Add CSS animations
const cssAnimations = `
  @keyframes pulse {
    0%, 100% { opacity: 1; }
    50% { opacity: 0.7; }
  }
  
  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }
  
  .rebalance-button:hover {
    transform: translateY(-2px);
    box-shadow: 0 6px 20px rgba(0, 0, 0, 0.3);
  }
`;

const DeFiAutopilotDashboard = () => {
  // State management
  const [portfolio, setPortfolio] = useState(null);
  const [yields, setYields] = useState({});
  const [optimizationSuggestion, setSuggestion] = useState(null);
  const [loading, setLoading] = useState(true);
  const [connected, setConnected] = useState(false);
  const [rebalancing, setRebalancing] = useState(false);
  const [account, setAccount] = useState('');

  // API base URL
  const API_BASE = process.env.REACT_APP_API_URL || 'http://localhost:3000';

  // Initialize dashboard
  useEffect(() => {
    // Inject CSS animations
    const styleElement = document.createElement('style');
    styleElement.textContent = cssAnimations;
    document.head.appendChild(styleElement);

    initializeApp();

    // Set up real-time updates
    const interval = setInterval(() => {
      if (connected && portfolio) {
        fetchYields();
        checkOptimization();
      }
    }, 30000);

    return () => {
      clearInterval(interval);
      document.head.removeChild(styleElement);
    };
  }, [connected, portfolio]);

  const initializeApp = async () => {
    try {
      await connectWallet();
      await fetchYields();
      setLoading(false);
    } catch (error) {
      console.error('Initialization error:', error);
      setLoading(false);
    }
  };

  const connectWallet = async () => {
    try {
      if (typeof window.ethereum === 'undefined') {
        alert('Please install MetaMask to use DeFi Autopilot');
        return;
      }

      const provider = new ethers.providers.Web3Provider(window.ethereum);
      await provider.send("eth_requestAccounts", []);
      const signer = provider.getSigner();
      const address = await signer.getAddress();
      const balance = await signer.getBalance();

      setAccount(address);
      setConnected(true);
      
      setPortfolio({
        address,
        balance: parseFloat(ethers.utils.formatEther(balance)),
        currentYield: 3.2,
        protocol: 'Aave',
        riskProfile: 2,
        totalValue: 10000, // Mock for demo
        autoRebalanceEnabled: true
      });

      // Check for optimization after connecting
      setTimeout(checkOptimization, 2000);
      
    } catch (error) {
      console.error('Wallet connection failed:', error);
      alert('Failed to connect wallet: ' + error.message);
    }
  };

  const fetchYields = useCallback(async () => {
    try {
      const response = await fetch(`${API_BASE}/api/yields`);
      const data = await response.json();
      
      if (data.success) {
        setYields(data.data);
      } else {
        // Use fallback data for demo
        setYields({
          'Aave': { apy: 3.2, tvl: 2500000000, riskScore: 2, protocol: 'Aave' },
          'Compound': { apy: 7.8, tvl: 1800000000, riskScore: 2, protocol: 'Compound' },
          'Curve': { apy: 5.4, tvl: 850000000, riskScore: 3, protocol: 'Curve' },
          'Yearn': { apy: 6.4, tvl: 650000000, riskScore: 3, protocol: 'Yearn' },
          'Uniswap': { apy: 4.2, tvl: 420000000, riskScore: 4, protocol: 'Uniswap' }
        });
      }
    } catch (error) {
      console.error('Error fetching yields:', error);
      // Fallback yields for demo
      setYields({
        'Aave': { apy: 3.2, tvl: 2500000000, riskScore: 2 },
        'Compound': { apy: 7.8, tvl: 1800000000, riskScore: 2 },
        'Curve': { apy: 5.4, tvl: 850000000, riskScore: 3 },
        'Yearn': { apy: 6.4, tvl: 650000000, riskScore: 3 }
      });
    }
  }, [API_BASE]);

  const checkOptimization = useCallback(async () => {
    if (!portfolio) return;

    try {
      const response = await fetch(`${API_BASE}/api/optimize`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(portfolio)
      });
      
      const data = await response.json();
      
      if (data.success && data.strategy.shouldRebalance) {
        setSuggestion(data.strategy.recommendation);
      } else {
        // Demo suggestion for hackathon
        setSuggestion({
          fromProtocol: 'Aave',
          toProtocol: 'Compound',
          currentYield: 3.2,
          newYield: 7.8,
          yieldIncrease: 4.6,
          annualProfit: 460,
          executionCost: 3,
          netProfit: 457,
          paybackPeriod: 2,
          route: {
            path: ['Flare', 'XRPL', 'Flare'],
            totalCost: 0.002,
            estimatedTime: 8
          }
        });
      }
    } catch (error) {
      console.error('Optimization check failed:', error);
    }
  }, [portfolio, API_BASE]);

  const executeRebalance = async () => {
    if (!optimizationSuggestion) return;
    
    setRebalancing(true);
    
    try {
      // Simulate the rebalancing process
      await new Promise(resolve => {
        let progress = 0;
        const interval = setInterval(() => {
          progress += 12.5; // 8 steps over 8 seconds
          
          if (progress >= 100) {
            clearInterval(interval);
            resolve();
          }
        }, 1000);
      });

      // Update portfolio state
      setPortfolio(prev => ({
        ...prev,
        currentYield: optimizationSuggestion.newYield,
        protocol: optimizationSuggestion.toProtocol
      }));

      setSuggestion(null);
      alert(`🎉 Portfolio successfully rebalanced! Now earning ${optimizationSuggestion.newYield}% APY on ${optimizationSuggestion.toProtocol}`);
      
    } catch (error) {
      alert('Rebalancing failed: ' + error.message);
    }
    
    setRebalancing(false);
  };

  // Loading screen
  if (loading) {
    return (
      <div style={styles.loading}>
        <div style={styles.loadingSpinner}></div>
        <span>Loading DeFi Autopilot...</span>
      </div>
    );
  }

  // Connection screen
  if (!connected) {
    return (
      <div style={styles.dashboard}>
        <div style={styles.header}>
          <h1 style={styles.title}>🚀 DeFi Autopilot</h1>
          <p style={styles.subtitle}>AI-Powered Cross-Chain Yield Optimization</p>
          <button style={styles.connectButton} onClick={connectWallet}>
            Connect Wallet
          </button>
        </div>
      </div>
    );
  }

  return (
    <div style={styles.dashboard}>
      <div style={styles.header}>
        <h1 style={styles.title}>🚀 DeFi Autopilot</h1>
        <p style={styles.subtitle}>AI-Powered Cross-Chain Yield Optimization</p>
        <div style={styles.statusIndicator}>
          <div style={styles.statusDot}></div>
          <span>Connected: {account.substring(0, 6)}...{account.substring(account.length - 4)}</span>
        </div>
      </div>

      <div style={styles.container}>
        {/* Portfolio Overview */}
        <div style={styles.card}>
          <h2 style={styles.cardTitle}>Your Portfolio</h2>
          <div style={styles.balance}>
            ${portfolio?.totalValue?.toLocaleString() || '10,000'}
          </div>
          <div style={styles.yield}>
            Current Yield: {portfolio?.currentYield}% APY
          </div>
          <div style={styles.protocol}>
            Protocol: {portfolio?.protocol}
          </div>
          <div style={styles.statusIndicator}>
            <div style={styles.statusDot}></div>
            <span>Auto-Rebalance: Enabled</span>
          </div>
        </div>

        {/* Live Yields */}
        <div style={styles.card}>
          <h2 style={styles.cardTitle}>Live Market Yields</h2>
          {Object.entries(yields).map(([protocol, data]) => (
            <div key={protocol} style={styles.yieldRow}>
              <span style={styles.protocolName}>{protocol}</span>
              <span style={styles.yieldValue}>{data.apy}% APY</span>
            </div>
          ))}
        </div>

        {/* Optimization Alert */}
        {optimizationSuggestion && (
          <div style={styles.optimizationAlert}>
            <h3 style={styles.alertTitle}>
              🎯 Optimization Opportunity Detected!
            </h3>
            <p style={styles.alertDescription}>
              AI found a better yield opportunity: Move from{' '}
              <strong>{optimizationSuggestion.fromProtocol}</strong> ({optimizationSuggestion.currentYield}%) to{' '}
              <strong>{optimizationSuggestion.toProtocol}</strong> ({optimizationSuggestion.newYield}%)
            </p>
            
            <div style={styles.profitGrid}>
              <div style={styles.profitItem}>
                <div style={styles.profitLabel}>Annual Profit</div>
                <div style={styles.profitValue}>
                  +${optimizationSuggestion.annualProfit}
                </div>
              </div>
              <div style={styles.profitItem}>
                <div style={styles.profitLabel}>Execution Cost</div>
                <div style={styles.profitValue}>
                  ${optimizationSuggestion.executionCost}
                </div>
              </div>
              <div style={styles.profitItem}>
                <div style={styles.profitLabel}>Net Profit</div>
                <div style={styles.profitValue}>
                  +${optimizationSuggestion.netProfit}
                </div>
              </div>
              <div style={styles.profitItem}>
                <div style={styles.profitLabel}>Execution Time</div>
                <div style={styles.profitValue}>
                  {optimizationSuggestion.route?.estimatedTime || 8}s
                </div>
              </div>
            </div>

            <button
              style={{
                ...styles.rebalanceButton,
                opacity: rebalancing ? 0.7 : 1,
                cursor: rebalancing ? 'not-allowed' : 'pointer'
              }}
              className="rebalance-button"
              onClick={executeRebalance}
              disabled={rebalancing}
            >
              {rebalancing ? '⏳ Executing Rebalance...' : '🚀 Execute AI Rebalance'}
            </button>
          </div>
        )}

        {/* Portfolio Stats */}
        <div style={styles.card}>
          <h2 style={styles.cardTitle}>Portfolio Performance</h2>
          <div style={styles.yieldRow}>
            <span>Total Assets</span>
            <span style={styles.yieldValue}>
              ${portfolio?.totalValue?.toLocaleString() || '10,000'}
            </span>
          </div>
          <div style={styles.yieldRow}>
            <span>Current APY</span>
            <span style={styles.yieldValue}>{portfolio?.currentYield}%</span>
          </div>
          <div style={styles.yieldRow}>
            <span>Risk Level</span>
            <span style={{ color: '#60a5fa' }}>
              {portfolio?.riskProfile === 1 ? 'Conservative' :
               portfolio?.riskProfile === 2 ? 'Balanced' : 'Aggressive'}
            </span>
          </div>
          <div style={styles.yieldRow}>
            <span>Annual Earnings</span>
            <span style={styles.yieldValue}>
              ${Math.round((portfolio?.totalValue || 10000) * (portfolio?.currentYield || 3.2) / 100).toLocaleString()}
            </span>
          </div>
        </div>
      </div>
    </div>
  );
};

export default DeFiAutopilotDashboard;